generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model achievements {
  id                Int                 @id @default(autoincrement())
  name              String?             @db.VarChar(255)
  description       String?             @db.Text
  required_level    Int                 @default(0)
  required_subs     Int                 @default(0)
  required_gifts    Int                 @default(0)
  required_quiz     Int                 @default(0)
  required_messages Int                 @default(0)
  required_bits     Int                 @default(0)
  required_guess    Int                 @default(0)
  img               String              @db.VarChar(255)
  user_achievements user_achievements[]
}

model pets {
  id                          Int                 @id @default(autoincrement())
  userId                      String              @unique(map: "userId") @db.VarChar(255)
  name                        String              @db.VarChar(255)
  imageUrl                    String              @db.VarChar(1024)
  xp                          Int?                @default(0)
  level                       Int?                @default(1)
  subs                        Int                 @default(0)
  gifts                       Int                 @default(0)
  messages                    Int                 @default(0)
  bits                        Int                 @default(0)
  guess                       Int                 @default(0)
  quiz                        Int                 @default(0)
  pointsUsed                  Int?                @default(0)
  duels_duels_player1IdTopets duels[]             @relation("duels_player1IdTopets")
  duels_duels_player2IdTopets duels[]             @relation("duels_player2IdTopets")
  duels_duels_winnerIdTopets  duels[]             @relation("duels_winnerIdTopets")
  playercards                 playercards[]
  user_achievements           user_achievements[]
}

model user_achievements {
  user_id        String       @db.VarChar(255)
  achievement_id Int
  pets           pets         @relation(fields: [user_id], references: [userId], onUpdate: Restrict, map: "user_achievements_ibfk_1")
  achievements   achievements @relation(fields: [achievement_id], references: [id], onUpdate: Restrict, map: "user_achievements_ibfk_2")

  @@id([user_id, achievement_id])
  @@index([achievement_id], map: "achievement_id")
}

model product {
  id      Int    @id @default(autoincrement())
  name    String @db.VarChar(255)
  price   Float  @db.Float
  picture String @db.VarChar(255)
}

model card {
  id           Int           @id @default(autoincrement())
  name         String        @db.VarChar(255)
  picture      String        @db.VarChar(255)
  picture_back String        @map("picture-back") @db.VarChar(255)
  isDraw       Boolean
  evolvedId    Int?
  evolveCost   Int?
  category     String        @db.VarChar(55)
  rarety       String        @db.VarChar(55)
  dropRate     Int           @default(0)
  card         card?         @relation("cardTocard", fields: [evolvedId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "card_ibfk_1")
  other_card   card[]        @relation("cardTocard")
  playercards  playercards[]

  @@index([evolvedId], map: "evolvedId")
}

model playercards {
  petId    String  @db.VarChar(255)
  cardId   Int
  count    Int
  isInDeck Boolean @default(false)
  card     card    @relation(fields: [cardId], references: [id], onDelete: Cascade, map: "playercards_ibfk_1")
  pets     pets    @relation(fields: [petId], references: [userId], onDelete: Cascade, map: "playercards_ibfk_2")

  @@id([petId, cardId])
  @@index([cardId], map: "playercards_ibfk_1")
}

model duels {
  uuid                       String  @id @db.VarChar(255)
  player1Id                  String? @db.VarChar(255)
  player2Id                  String? @db.VarChar(255)
  winnerId                   String? @db.VarChar(255)
  pets_duels_player1IdTopets pets?   @relation("duels_player1IdTopets", fields: [player1Id], references: [userId], onDelete: Cascade, map: "duels_ibfk_1")
  pets_duels_player2IdTopets pets?   @relation("duels_player2IdTopets", fields: [player2Id], references: [userId], onDelete: Cascade, map: "duels_ibfk_2")
  pets_duels_winnerIdTopets  pets?   @relation("duels_winnerIdTopets", fields: [winnerId], references: [userId], onDelete: Cascade, map: "duels_ibfk_3")

  @@index([player2Id], map: "duels_ibfk_2")
  @@index([player1Id], map: "duels_ibfk_1")
  @@index([winnerId], map: "duels_ibfk_3")
}
